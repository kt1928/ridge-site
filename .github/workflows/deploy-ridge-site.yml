name: Deploy Ridge Site to Unraid via Tailscale

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "PNPM version: $(pnpm --version)"
          echo "Current directory: $(pwd)"
          echo "Next.js config:"
          cat next.config.mjs

      - name: Build with fallback
        run: |
          echo "=== Attempting Next.js Build ==="
          
          # Try normal build first
          if pnpm run build; then
            echo "‚úÖ Next.js build successful"
            BUILD_SUCCESS=true
          else
            echo "‚ùå Next.js build failed, trying alternative approach"
            BUILD_SUCCESS=false
          fi
          
          # Check if out directory exists
          if [ -d "out" ]; then
            echo "‚úÖ out/ directory found"
            ls -la out/
          else
            echo "‚ùå out/ directory missing, creating fallback"
            
            # Create out directory and copy essential files
            mkdir -p out
            
            # Try to get built files from .next if available
            if [ -d ".next" ]; then
              echo "Found .next directory, attempting manual static export"
              
              # Copy public assets
              if [ -d "public" ]; then
                cp -r public/* out/ 2>/dev/null || true
              fi
              
              # Copy app files and try to create basic structure
              cp -r app/ out/ 2>/dev/null || true
              cp -r components/ out/ 2>/dev/null || true
              
              # Create a basic index.html if none exists
              if [ ! -f "out/index.html" ]; then
                echo '<!DOCTYPE html>
                <html>
                <head>
                    <title>Ridge Site</title>
                    <meta charset="utf-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1">
                </head>
                <body>
                    <h1>Ridge Site</h1>
                    <p>Site is being built...</p>
                    <script>
                        console.log("Ridge Site loading...");
                    </script>
                </body>
                </html>' > out/index.html
              fi
            else
              echo "No .next directory found either, creating minimal structure"
              # Copy just the essential files
              cp -r public/* out/ 2>/dev/null || true
              echo "<h1>Ridge Site Deployment</h1><p>Build in progress...</p>" > out/index.html
            fi
            
            echo "Fallback structure created:"
            ls -la out/
          fi

      - name: Prepare deployment files
        run: |
          echo "=== Preparing files for deployment ==="
          
          # Ensure we have something to deploy
          if [ ! -d "out" ]; then
            mkdir -p out
            echo "<h1>Ridge Site</h1>" > out/index.html
          fi
          
          # Show what we're deploying
          echo "Files to deploy:"
          find out/ -type f | head -20
          echo "Total files: $(find out/ -type f | wc -l)"
          echo "Total size: $(du -sh out/)"

      - name: Set up Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci-oauth

      - name: Deploy to Unraid
        run: |
          echo "Starting deployment to /mnt/user/ridge-site/ ..."
          
          # Show what we're about to deploy
          echo "Deployment source (out/ directory):"
          ls -la out/
          
          # Deploy the files from out/ to /mnt/user/ridge-site/
          rsync -avz --delete --progress \
            -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            ./out/ \
            github-deploy@100.78.240.7:/mnt/user/ridge-site/
          
          echo "‚úÖ Deployment completed!"

      - name: Deployment notification
        run: |
          echo "üéâ Ridge Site deployed successfully!"
          echo "üìÅ Files are now in: /mnt/user/ridge-site/"
          echo "üåê Configure your nginx to serve from /mnt/user/ridge-site/"
          echo "üîß Your nginx config should point to: root /mnt/user/ridge-site;"