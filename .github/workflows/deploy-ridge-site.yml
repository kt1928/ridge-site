name: Deploy Ridge Site to Unraid via Tailscale

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "PNPM version: $(pnpm --version)"
          echo "Current directory: $(pwd)"
          echo "Next.js config:"
          cat next.config.mjs

      - name: Build and export static site
        run: |
          echo "=== Building Next.js Static Export ==="
          
          # Clean any existing builds
          rm -rf out/ .next/
          
          # Run the build
          echo "Running: pnpm run build"
          pnpm run build
          
          echo "Build completed. Checking output directories..."
          
          # Check various possible output locations
          echo "=== Directory structure after build ==="
          find . -maxdepth 2 -type d -name "*out*" 2>/dev/null || echo "No 'out' directories found"
          find . -maxdepth 3 -type d -name "export" 2>/dev/null || echo "No 'export' directories found"
          
          # Check if Next.js created the out directory
          if [ -d "out" ]; then
            echo "‚úÖ Found out/ directory"
            ls -la out/
          elif [ -d ".next/static" ]; then
            echo "‚öôÔ∏è Found .next/static, creating static export manually"
            mkdir -p out
            
            # Copy static assets from .next
            if [ -d ".next/static" ]; then
              mkdir -p out/_next/static
              cp -r .next/static/* out/_next/static/
            fi
            
            # Copy server files if they exist (pre-rendered pages)
            if [ -d ".next/server" ]; then
              find .next/server -name "*.html" -exec cp {} out/ \; 2>/dev/null || true
            fi
            
            # Copy public assets
            if [ -d "public" ]; then
              cp -r public/* out/ 2>/dev/null || true
            fi
            
            # Create index.html if it doesn't exist
            if [ ! -f "out/index.html" ]; then
              echo "Creating fallback index.html"
              cat > out/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Ridge Site</title>
              <style>
                  body { font-family: system-ui, sans-serif; margin: 0; padding: 2rem; }
                  .container { max-width: 800px; margin: 0 auto; text-align: center; }
                  .status { color: #0070f3; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Ridge Site</h1>
                  <p class="status">Successfully deployed!</p>
                  <p>Your site is now live on the Unraid server.</p>
              </div>
          </body>
          </html>
          EOF
            fi
          else
            echo "‚ùå No build output found, creating minimal fallback"
            mkdir -p out
            
            # Copy source files as fallback
            cp -r public/* out/ 2>/dev/null || true
            
            cat > out/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Ridge Site</title>
              <style>
                  body { font-family: system-ui, sans-serif; margin: 0; padding: 2rem; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; text-align: center; }
                  .warning { color: #ff6b35; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Ridge Site</h1>
                  <p class="warning">Build in progress...</p>
                  <p>The site is being built and will be available shortly.</p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          echo "=== Final output directory ==="
          echo "Contents of out/:"
          ls -la out/
          echo "File count: $(find out/ -type f | wc -l)"
          echo "Total size: $(du -sh out/ 2>/dev/null || echo 'Unknown')"

      - name: Set up Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci-oauth

      - name: Deploy to Unraid
        run: |
          echo "Starting deployment to /mnt/user/ridge-site/ ..."
          
          # Show what we're about to deploy
          echo "Deployment source (out/ directory):"
          ls -la out/
          
          # Deploy the files from out/ to /mnt/user/ridge-site/
          # Using --no-perms to avoid permission issues
          rsync -avz --delete --progress --no-perms --no-owner --no-group \
            -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            ./out/ \
            github-deploy@100.78.240.7:/mnt/user/ridge-site/
          
          echo "‚úÖ Deployment completed!"

      - name: Deployment notification
        run: |
          echo "üéâ Ridge Site deployed successfully!"
          echo "üìÅ Files are now in: /mnt/user/ridge-site/"
          echo "üåê Configure your nginx to serve from /mnt/user/ridge-site/"
          echo "üîß Your nginx config should point to: root /mnt/user/ridge-site;"