name: Deploy Ridge Site to Unraid via Tailscale

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Debug before build
        run: |
          echo "=== Pre-build Debug ==="
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Next.js config:"
          cat next.config.mjs
          echo "Package.json scripts:"
          cat package.json | grep -A 10 '"scripts"'

      - name: Build static site
        run: |
          echo "=== Starting Next.js Build ==="
          pnpm run build
          echo "=== Build Exit Code: $? ==="

      - name: Verify build output
        run: |
          echo "=== Post-build Debug ==="
          echo "Current directory: $(pwd)"
          echo "All files and directories:"
          ls -la
          
          if [ -d "out" ]; then
            echo "‚úÖ out/ directory exists!"
            echo "Contents of out/ directory:"
            ls -la out/
            echo "Total size of out/:"
            du -sh out/
            echo "Number of files in out/:"
            find out/ -type f | wc -l
          else
            echo "‚ùå out/ directory does not exist!"
            echo "Checking for .next directory:"
            ls -la .next/ || echo ".next directory also missing"
            echo "Full file listing:"
            find . -name "*.html" -o -name "out" -o -name ".next" 2>/dev/null
          fi

      - name: Set up Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci-oauth
          # version: latest # Optional: specify a Tailscale client version if needed
          # use-cache: 'true' # Optional: for faster runs

      - name: Deploy static files with Rsync over Tailscale
        run: |
          if [ ! -d "out" ]; then
            echo "‚ùå Cannot deploy: out/ directory does not exist!"
            echo "Build may have failed. Please check the build logs above."
            exit 1
          fi
          
          echo "Starting deployment of static files..."
          echo "Files to deploy:"
          find out/ -type f | head -10
          
          # Deploy the built static files from the 'out' directory
          rsync -avz --delete --progress \
            -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            ./out/ \
            github-deploy@100.78.240.7:/mnt/user/ridge-site/
          
          echo "Deployment completed successfully!"
        # Explanation of changes:
        # -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null":
        #   This tells rsync to use SSH and disables strict host key checking.
        #   Since the Tailscale node is ephemeral, its host key isn't consistently in known_hosts.
        #   Tailscale's secure authentication makes this generally safe within the tailnet.
        # github-deploy@unraid-tower:
        #   The user on your Unraid server (github-deploy) and its Tailscale hostname.
        #   Make sure 'unraid-tower' is resolvable by Tailscale's MagicDNS in your tailnet,
        #   or use its Tailscale IP address (e.g., 100.x.x.x).

      - name: Deployment notification
        run: |
          echo "‚úÖ Ridge Site deployed successfully!"
          echo "üåê Site should be available at your configured nginx URL"
          echo "üìÅ Files deployed to: /mnt/user/ridge-site/"
          echo "üéØ The files from ./out/ are now in /mnt/user/ridge-site/ on your Unraid server"