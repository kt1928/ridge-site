# Ridge Server Deployment - Technical Handover Document

## Project Overview

**Project**: Ridge Portfolio Site (ridgeserver.com)  
**Infrastructure**: Ubuntu Server with K3s (Lightweight Kubernetes)  
**Architecture**: Containerized Next.js application with automated CI/CD pipeline  
**Last Updated**: August 2025  
**Document Version**: 1.0

---

## Table of Contents
1. [System Architecture](#system-architecture)
2. [Infrastructure Details](#infrastructure-details)
3. [Application Stack](#application-stack)
4. [CI/CD Pipeline](#cicd-pipeline)
5. [Deployment Process](#deployment-process)
6. [Common Operations](#common-operations)
7. [SWAG Configuration](#swag-configuration)
8. [Backup Procedures](#backup-procedures)
9. [Monitoring](#monitoring)
10. [Access Requirements](#access-requirements)
11. [Common Issues & Solutions](#common-issues--solutions)
12. [Important Notes](#important-notes)
13. [Future Improvements](#future-improvements)
14. [Contact & Resources](#contact--resources)
15. [Handover Checklist](#handover-checklist)

---

## System Architecture

```
GitHub Repository → GitHub Actions → Docker Hub → K3s Cluster → SWAG Proxy → Public Internet
```

### Components Overview
- **Source Control**: GitHub repository containing Next.js portfolio site
- **CI/CD**: GitHub Actions for automated builds
- **Container Registry**: Docker Hub for image storage
- **Orchestration**: K3s (Kubernetes) on Ubuntu Server
- **Reverse Proxy**: SWAG (Nginx + Let's Encrypt) for SSL and routing
- **Domain**: ridgeserver.com

### Architecture Diagram
```
┌──────────────┐     ┌──────────────┐     ┌──────────────┐
│   Developer  │────▶│    GitHub    │────▶│GitHub Actions│
│   (git push) │     │  Repository  │     │   (Build)    │
└──────────────┘     └──────────────┘     └──────────────┘
                                                  │
                                                  ▼
                                          ┌──────────────┐
                                          │  Docker Hub  │
                                          │   Registry   │
                                          └──────────────┘
                                                  │
                                                  ▼
┌────────────────────────────────────────────────────────┐
│                    Ubuntu Server                       │
│  ┌──────────────────────────────────────────────────┐  │
│  │                  K3s Cluster                     │  │
│  │  ┌─────────────┐        ┌─────────────────────┐  │  │
│  │  │    SWAG     │───────▶│     Portfolio       │  │  │
│  │  │   (Nginx)   │        │    Application      │  │  │
│  │  └─────────────┘        └─────────────────────┘  │  │
│  └──────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────┘
                              │
                              ▼
                    ┌──────────────────┐
                    │  ridgeserver.com │
                    │   (Public Users) │
                    └──────────────────┘
```

---

## Infrastructure Details

### Ubuntu Server
- **OS**: Ubuntu Server (version to be confirmed)
- **Location**: Self-hosted/VPS (specify your setup)
- **K3s Version**: Latest stable
- **Hardware Requirements**:
  - Minimum 2GB RAM
  - 20GB disk space
  - 2 CPU cores

### Directory Structure
```
/home/kappy/k8s/
├── apps/
│   ├── swag/
│   │   ├── deployment.yaml
│   │   ├── config/
│   │   └── README.md
│   └── portfolio/
│       ├── deployment.yaml
│       ├── update-cronjob.yaml
│       └── README.md
├── scripts/
│   ├── deploy-swag.sh
│   ├── backup-swag.sh
│   ├── update-portfolio.sh
│   └── k8s-manage.sh
└── backups/
    └── swag/
        └── [timestamp]/
```

### Network Configuration
- **External Ports**:
  - Port 80 (HTTP) → NodePort 30080
  - Port 443 (HTTPS) → NodePort 30443
- **Internal Network**: 
  - K3s cluster network: 10.43.0.0/16
  - Service DNS: *.svc.cluster.local
- **DNS Configuration**: 
  - A record: ridgeserver.com → Server IP
  - A record: www.ridgeserver.com → Server IP
- **SSL/TLS**: 
  - Managed automatically by SWAG
  - Let's Encrypt certificates
  - Auto-renewal every 90 days

---

## Application Stack

### Portfolio Application
- **Framework**: Next.js (Static Export)
- **Node Version**: 20 LTS
- **Package Manager**: pnpm v8
- **Build Output**: Static files in `/out` directory
- **Container Base**: nginx:alpine
- **Container Size**: ~50MB

### Dependencies
```json
{
  "dependencies": {
    "next": "latest",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "typescript": "^5"
  }
}
```

### Key Configuration Files

#### 1. Dockerfile (Repository Root)
```dockerfile
# Multi-stage build for optimal size
FROM node:20-alpine AS deps
WORKDIR /app
COPY package.json pnpm-lock.yaml ./
RUN corepack enable pnpm && pnpm install --frozen-lockfile

FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN corepack enable pnpm && pnpm run build

FROM nginx:alpine AS runner
WORKDIR /app

# Copy static build
COPY --from=builder /app/out /usr/share/nginx/html

# Next.js specific nginx config
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    
    # Next.js static files
    location /_next/static {
        add_header Cache-Control "public, max-age=31536000, immutable";
    }
    
    # Main app
    location / {
        try_files $uri $uri.html $uri/ /index.html;
    }
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
}
EOF

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

#### 2. K8s Portfolio Deployment
**File**: `/home/kappy/k8s/apps/portfolio/deployment.yaml`
```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: portfolio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portfolio
  namespace: portfolio
spec:
  replicas: 2
  selector:
    matchLabels:
      app: portfolio
  template:
    metadata:
      labels:
        app: portfolio
    spec:
      containers:
      - name: portfolio
        image: [DOCKERHUB_USERNAME]/portfolio:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "256Mi"
            cpu: "200m"
          requests:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: portfolio
  namespace: portfolio
spec:
  selector:
    app: portfolio
  ports:
  - port: 80
    targetPort: 80
```

#### 3. SWAG Deployment
**File**: `/home/kappy/k8s/apps/swag/deployment.yaml`
```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: swag
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: swag-config
  namespace: swag
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: swag
  namespace: swag
spec:
  replicas: 1
  selector:
    matchLabels:
      app: swag
  template:
    metadata:
      labels:
        app: swag
    spec:
      containers:
      - name: swag
        image: lscr.io/linuxserver/swag:latest
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        - name: URL
          value: "ridgeserver.com"
        - name: SUBDOMAINS
          value: "www"
        - name: VALIDATION
          value: "http"
        - name: EMAIL
          value: "admin@ridgeserver.com"
        - name: STAGING
          value: "false"
        ports:
        - containerPort: 443
        - containerPort: 80
        volumeMounts:
        - name: config
          mountPath: /config
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: swag-config
---
apiVersion: v1
kind: Service
metadata:
  name: swag
  namespace: swag
spec:
  type: NodePort
  selector:
    app: swag
  ports:
  - name: https
    port: 443
    targetPort: 443
    nodePort: 30443
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30080
```

---

## CI/CD Pipeline

### GitHub Actions Workflow
**File**: `.github/workflows/deploy.yml`

```yaml
name: Deploy Ridge Site to K8s

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/portfolio

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Setup pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      # Cache dependencies
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install and build
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Next.js application
        run: pnpm run build

      # Docker build and push
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
```

### Required GitHub Secrets

| Secret Name | Description | How to Obtain |
|------------|-------------|---------------|
| `DOCKER_HUB_USERNAME` | Docker Hub username | Create account at hub.docker.com |
| `DOCKER_HUB_TOKEN` | Docker Hub access token | Docker Hub → Account Settings → Security → New Access Token |

### Setting Up Secrets
1. Navigate to GitHub repository
2. Go to Settings → Secrets and variables → Actions
3. Click "New repository secret"
4. Add each secret with its value

---

## Deployment Process

### Automatic Deployment Flow

```mermaid
graph LR
    A[Git Push] --> B[GitHub Actions Triggered]
    B --> C[Build Next.js App]
    C --> D[Create Docker Image]
    D --> E[Push to Docker Hub]
    E --> F[K8s CronJob Checks]
    F --> G[Pull New Image]
    G --> H[Rolling Update]
    H --> I[Live on ridgeserver.com]
```

1. **Developer pushes code** to `main` branch
2. **GitHub Actions** triggers automatically (2-3 minutes)
3. **Build process** creates optimized Docker image
4. **Image pushed** to Docker Hub registry
5. **K8s CronJob** checks every 5 minutes for updates
6. **Rolling update** ensures zero downtime
7. **SWAG proxy** routes traffic to new container

### Manual Deployment Commands

```bash
# SSH into server
ssh username@server-ip

# Force immediate update
kubectl rollout restart deployment/portfolio -n portfolio

# Watch rollout status
kubectl rollout status deployment/portfolio -n portfolio

# Check deployment
kubectl get pods -n portfolio
kubectl describe deployment portfolio -n portfolio

# View recent events
kubectl get events -n portfolio --sort-by='.lastTimestamp'
```

### Update CronJob Configuration
**File**: `/home/kappy/k8s/apps/portfolio/update-cronjob.yaml`
```yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: portfolio-updater
  namespace: portfolio
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: portfolio-updater
          containers:
          - name: kubectl
            image: bitnami/kubectl:latest
            command:
            - /bin/sh
            - -c
            - |
              kubectl rollout restart deployment/portfolio -n portfolio
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: portfolio-updater
  namespace: portfolio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: portfolio-updater
  namespace: portfolio
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: portfolio-updater
  namespace: portfolio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: portfolio-updater
subjects:
- kind: ServiceAccount
  name: portfolio-updater
  namespace: portfolio
```

---

## Common Operations

### Viewing Logs

```bash
# Portfolio application logs
kubectl logs -n portfolio deployment/portfolio -f
kubectl logs -n portfolio deployment/portfolio --tail=100

# SWAG proxy logs
kubectl logs -n swag deployment/swag -f

# CronJob logs
kubectl logs -n portfolio job/portfolio-updater-xxxxx

# All pods in namespace
kubectl logs -n portfolio --all-containers=true
```

### Checking Status

```bash
# Quick status check
kubectl get all --all-namespaces

# Detailed pod information
kubectl describe pod -n portfolio
kubectl describe pod -n swag

# Resource usage
kubectl top nodes
kubectl top pods --all-namespaces

# Service endpoints
kubectl get endpoints --all-namespaces
```

### Container Access

```bash
# Access portfolio container
kubectl exec -it -n portfolio deployment/portfolio -- /bin/sh

# Access SWAG container
kubectl exec -it -n swag deployment/swag -- /bin/bash

# Copy files from container
kubectl cp swag/swag-pod-name:/config/nginx ./local-nginx-backup
```

### Troubleshooting Commands

```bash
# Debug failing pod
kubectl describe pod [pod-name] -n portfolio
kubectl logs [pod-name] -n portfolio --previous

# Check events
kubectl get events -n portfolio --sort-by='.lastTimestamp'

# Port forwarding for debugging
kubectl port-forward -n portfolio deployment/portfolio 8080:80

# Check DNS resolution
kubectl run -it --rm debug --image=alpine --restart=Never -n portfolio -- nslookup portfolio.portfolio.svc.cluster.local
```

### Rollback Procedures

```bash
# View deployment history
kubectl rollout history deployment/portfolio -n portfolio

# Rollback to previous version
kubectl rollout undo deployment/portfolio -n portfolio

# Rollback to specific revision
kubectl rollout undo deployment/portfolio -n portfolio --to-revision=2

# Pause deployments (emergency)
kubectl rollout pause deployment/portfolio -n portfolio

# Resume deployments
kubectl rollout resume deployment/portfolio -n portfolio
```

---

## SWAG Configuration

### File Locations
- **Container Path**: `/config/nginx/site-confs/`
- **Persistent Volume**: Mounted from PVC
- **SSL Certificates**: `/config/etc/letsencrypt/live/`

### Main Site Configuration
**File**: `/config/nginx/site-confs/ridgeserver.conf`
```nginx
# HTTPS Server Block
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    server_name ridgeserver.com www.ridgeserver.com;
    
    # SSL Configuration
    include /config/nginx/ssl.conf;
    ssl_certificate /config/etc/letsencrypt/live/ridgeserver.com/fullchain.pem;
    ssl_certificate_key /config/etc/letsencrypt/live/ridgeserver.com/privkey.pem;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Proxy Configuration
    location / {
        include /config/nginx/proxy.conf;
        resolver 10.43.0.10 valid=30s;  # K3s DNS
        proxy_pass http://portfolio.portfolio.svc.cluster.local;
        
        # Websocket support (for development)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Static file caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}

# HTTP to HTTPS Redirect
server {
    listen 80;
    listen [::]:80;
    server_name ridgeserver.com www.ridgeserver.com;
    return 301 https://$server_name$request_uri;
}
```

### Updating SWAG Configuration

```bash
# Access SWAG container
kubectl exec -it -n swag deployment/swag -- /bin/bash

# Edit configuration
nano /config/nginx/site-confs/ridgeserver.conf

# Test configuration
nginx -t

# Reload nginx
nginx -s reload

# Exit container
exit
```

---

## Backup Procedures

### What to Backup

1. **SWAG Configuration**
   - Path: `/config` in SWAG pod
   - Includes: SSL certificates, nginx configs, fail2ban rules
   - Frequency: Weekly

2. **K8s Manifests**
   - Path: `/home/kappy/k8s/`
   - Includes: All deployment YAML files
   - Frequency: After each change

3. **Application Data**
   - GitHub repository (already backed up)
   - Docker images (stored in Docker Hub)

### Backup Script
**File**: `/home/kappy/k8s/scripts/backup-swag.sh`
```bash
#!/bin/bash

# Backup configuration
BACKUP_DIR="/home/kappy/k8s/backups/swag"
DATE=$(date +%Y%m%d_%H%M%S)
POD=$(kubectl get pod -n swag -l app=swag -o jsonpath="{.items[0].metadata.name}")

echo "Starting backup of SWAG configuration..."
echo "Pod: $POD"
echo "Backup directory: $BACKUP_DIR/$DATE"

# Create backup directory
mkdir -p "$BACKUP_DIR/$DATE"

# Backup nginx configs
kubectl cp swag/$POD:/config/nginx "$BACKUP_DIR/$DATE/nginx"

# Backup Let's Encrypt certificates
kubectl cp swag/$POD:/config/etc/letsencrypt "$BACKUP_DIR/$DATE/letsencrypt"

# Backup fail2ban configuration
kubectl cp swag/$POD:/config/fail2ban "$BACKUP_DIR/$DATE/fail2ban"

# Create backup metadata
cat > "$BACKUP_DIR/$DATE/metadata.txt" << EOF
Backup Date: $(date)
Pod Name: $POD
SWAG Version: $(kubectl get deployment swag -n swag -o jsonpath='{.spec.template.spec.containers[0].image}')
EOF

echo "Backup completed successfully!"

# Compress backup
tar -czf "$BACKUP_DIR/backup-$DATE.tar.gz" -C "$BACKUP_DIR" "$DATE"
rm -rf "$BACKUP_DIR/$DATE"

# Keep only last 5 backups
cd "$BACKUP_DIR"
ls -t backup-*.tar.gz | tail -n +6 | xargs -r rm

echo "Cleanup completed. Backup saved as: backup-$DATE.tar.gz"
```

### Recovery Procedure

```bash
# 1. Extract backup
cd /home/kappy/k8s/backups/swag
tar -xzf backup-YYYYMMDD_HHMMSS.tar.gz

# 2. Restore SWAG configuration
POD=$(kubectl get pod -n swag -l app=swag -o jsonpath="{.items[0].metadata.name}")
kubectl cp ./YYYYMMDD_HHMMSS/nginx swag/$POD:/config/
kubectl cp ./YYYYMMDD_HHMMSS/letsencrypt swag/$POD:/config/etc/

# 3. Restart SWAG
kubectl rollout restart deployment/swag -n swag

# 4. Verify restoration
kubectl logs -n swag deployment/swag
```

### Automated Backup Cron

```bash
# Add to crontab
crontab -e

# Add weekly backup (Sunday 2 AM)
0 2 * * 0 /home/kappy/k8s/scripts/backup-swag.sh >> /home/kappy/k8s/backups/backup.log 2>&1
```

---

## Monitoring

### Health Check Endpoints

| Service | Health Check URL | Expected Response |
|---------|-----------------|-------------------|
| Portfolio | http://server-ip:30080 | Redirect to HTTPS |
| SWAG HTTPS | https://server-ip:30443 | SSL certificate warning (normal) |
| Portfolio Direct | `kubectl port-forward -n portfolio deployment/portfolio 8080:80` then http://localhost:8080 | Portfolio site |

### Monitoring Commands

```bash
# Resource usage
kubectl top nodes
kubectl top pods --all-namespaces

# Pod status
watch kubectl get pods --all-namespaces

# System events
kubectl get events --all-namespaces --sort-by='.lastTimestamp'

# Certificate expiry check
kubectl exec -n swag deployment/swag -- openssl x509 -in /config/etc/letsencrypt/live/ridgeserver.com/cert.pem -noout -dates
```

### Key Metrics to Monitor

1. **Pod Health**
   - Restart count < 5 per day
   - Ready state = True
   - CPU usage < 80%
   - Memory usage < 90%

2. **Application Performance**
   - Response time < 500ms
   - HTTP 200 status codes
   - No 5xx errors

3. **SSL Certificate**
   - Expiry > 30 days
   - Auto-renewal functioning

4. **Disk Usage**
   - PVC usage < 80%
   - Node disk usage < 85%

### Alerting Setup (Optional)

```yaml
# Simple webhook alerting with CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: health-check
  namespace: default
spec:
  schedule: "*/15 * * * *"  # Every 15 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: health-check
            image: curlimages/curl:latest
            command:
            - /bin/sh
            - -c
            - |
              if ! curl -f https://ridgeserver.com > /dev/null 2>&1; then
                curl -X POST https://hooks.slack.com/services/YOUR/WEBHOOK/URL \
                  -H 'Content-Type: application/json' \
                  -d '{"text":"Alert: ridgeserver.com is down!"}'
              fi
          restartPolicy: OnFailure
```

---

## Access Requirements

### For Development Team

1. **GitHub Repository**
   - Read/Write access to main branch
   - Ability to create/merge pull requests
   - Access to Actions tab for CI/CD monitoring

2. **Docker Hub** (Optional)
   - Read access for debugging
   - Account for pulling private images

3. **Documentation**
   - This handover document
   - Architecture diagrams
   - API documentation (if applicable)

### For Operations Team

1. **Server Access**
   - SSH access to Ubuntu server
   - sudo privileges for system updates
   - Access to K3s cluster

2. **Kubernetes Access**
   ```bash
   # Verify kubectl access
   kubectl cluster-info
   kubectl get nodes
   ```

3. **Required Knowledge**
   - Basic Kubernetes concepts (pods, deployments, services)
   - Docker fundamentals
   - Nginx configuration basics
   - Linux command line
   - Git basics

### For External Contractors

1. **Minimum Access**
   - GitHub repository (read-only initially)
   - Documentation access
   - Staging environment (if available)

2. **After Onboarding**
   - GitHub write access
   - Docker Hub access
   - Production server access (limited)

---

## Common Issues & Solutions

### Deployment Issues

| Issue | Symptoms | Solution |
|-------|----------|----------|
| **Image Pull Error** | Pod stuck in `ImagePullBackOff` | Check Docker Hub credentials, verify image exists |
| **Crash Loop** | Pod repeatedly restarting | Check logs: `kubectl logs -n portfolio [pod-name] --previous` |
| **OOMKilled** | Pod killed due to memory | Increase memory limits in deployment.yaml |
| **SSL Certificate Error** | Browser shows security warning | Check SWAG logs, ensure ports 80/443 are accessible |
| **502 Bad Gateway** | SWAG returns 502 error | Verify portfolio pod is running, check service name in SWAG config |

### Troubleshooting Flowchart

```
Problem Detected
    │
    ├─ Check Pod Status
    │   └─ kubectl get pods -n portfolio
    │       ├─ Running → Check Logs
    │       ├─ Pending → Check Events
    │       └─ Error → Describe Pod
    │
    ├─ Check Service
    │   └─ kubectl get svc -n portfolio
    │       └─ Verify endpoints exist
    │
    ├─ Check SWAG
    │   └─ kubectl logs -n swag deployment/swag
    │       └─ Look for proxy errors
    │
    └─ Check GitHub Actions
        └─ Verify build succeeded
```

### Quick Fixes

```bash
# Restart everything
kubectl rollout restart deployment/portfolio -n portfolio
kubectl rollout restart deployment/swag -n swag

# Clear Docker cache on server
docker system prune -a --volumes

# Force pull latest image
kubectl set image deployment/portfolio portfolio=[USERNAME]/portfolio:latest -n portfolio

# Reset failed CronJob
kubectl delete job -n portfolio $(kubectl get job -n portfolio | grep portfolio-updater | awk '{print $1}')
```

---

## Important Notes

### Security Considerations

1. **Secrets Management**
   - Never commit secrets to Git
   - Use GitHub Secrets for CI/CD
   - Rotate Docker Hub tokens regularly
   - Keep server access logs

2. **Network Security**
   - Only expose ports 80/443
   - Use firewall rules (ufw/iptables)
   - Regular security updates
   - Enable fail2ban in SWAG

3. **SSL/TLS**
   - Certificates auto-renew via Let's Encrypt
   - Check expiry monthly
   - Use strong cipher suites
   - Enable HSTS headers

### Cost Considerations

| Service | Cost | Limits |
|---------|------|--------|
| GitHub Actions | Free | 2,000 minutes/month |
| Docker Hub | Free | Unlimited public images |
| Server Hosting | Varies | Depends on provider |
| Domain | ~$12/year | Annual renewal |

### Performance Optimization

1. **Image Optimization**
   - Multi-stage Docker builds
   - Alpine base images
   - Minimize layer count
   - Use build cache

2. **K8s Optimization**
   - Set resource limits
   - Use horizontal pod autoscaling
   - Enable pod disruption budgets
   - Regular cleanup of old resources

3. **Caching Strategy**
   - CloudFlare CDN (optional)
   - Browser caching headers
   - Static asset optimization
   - Image compression

---

## Future Improvements

### Phase 1: Monitoring & Observability
- [ ] Prometheus for metrics collection
- [ ] Grafana for visualization
- [ ] Loki for log aggregation
- [ ] AlertManager for notifications

### Phase 2: Enhanced CI/CD
- [ ] ArgoCD for GitOps
- [ ] Staging environment
- [ ] Automated testing in pipeline
- [ ] Webhook for instant deployments

### Phase 3: High Availability
- [ ] Multi-node K3s cluster
- [ ] Database backend (if needed)
- [ ] Redis cache layer
- [ ] Load balancer (MetalLB)

### Phase 4: Advanced Features
- [ ] A/B testing capability
- [ ] Feature flags
- [ ] Blue-green deployments
- [ ] Canary releases

### Optional Enhancements
- [ ] Cloudflare integration
- [ ] Backup to S3
- [ ] Secrets management (Vault)
- [ ] Infrastructure as Code (Terraform)

---

## Contact & Resources

### Essential Documentation

| Resource | URL | Purpose |
|----------|-----|---------|
| K3s Docs | https://docs.k3s.io/ | Kubernetes platform |
| SWAG Docs | https://docs.linuxserver.io/images/docker-swag | Reverse proxy setup |
| Next.js Deployment | https://nextjs.org/docs/deployment | Application framework |
| Docker Hub | https://hub.docker.com/ | Container registry |
| Kubernetes Basics | https://kubernetes.io/docs/tutorials/ | K8s fundamentals |

### Repository Structure
```
portfolio-repo/
├── .github/
│   └── workflows/
│       └── deploy.yml          # CI/CD pipeline
├── public/                     # Static assets
│   ├── favicon.ico
│   └── images/
├── src/                        # Source code
│   ├── pages/
│   ├── components/
│   └── styles/
├── Dockerfile                  # Container definition
├── next.config.mjs            # Next.js configuration
├── package.json               # Dependencies
├── pnpm-lock.yaml            # Lock file
├── README.md                 # Project documentation
└── .env.example              # Environment variables template
```

### Support Contacts

| Role | Name | Contact | Responsibility |
|------|------|---------|---------------|
| Project Owner | [Your Name] | [Email] | Overall project ownership |
| DevOps Lead | [Name] | [Email] | Infrastructure management |
| Developer | [Name] | [Email] | Application development |
| Domain Admin | [Name] | [Email] | DNS and domain management |

### Useful Commands Reference

```bash
# Quick health check
alias k='kubectl'
alias kgp='kubectl get pods --all-namespaces'
alias klog='kubectl logs -f'

# Add to ~/.bashrc for convenience
echo "alias k='kubectl'" >> ~/.bashrc
echo "alias kgp='kubectl get pods --all-namespaces'" >> ~/.bashrc
echo "alias klog='kubectl logs -f'" >> ~/.bashrc
source ~/.bashrc
```

---

## Handover Checklist

### For Current Owner

**Access Transfer**
- [ ] GitHub repository - Add new developer as collaborator
- [ ] Docker Hub - Share organization access or credentials
- [ ] Server SSH - Create new user account with sudo access
- [ ] Domain registrar - Provide access or become technical contact
- [ ] Cloudflare (if used) - Add as team member

**Documentation Transfer**
- [ ] This handover document - Ensure latest version
- [ ] Architecture diagrams - Update if changed
- [ ] Credentials document - Secure transfer method
- [ ] Known issues list - Document any pending problems
- [ ] Future roadmap - Share planned improvements

**Knowledge Transfer**
- [ ] Walk through complete deployment process
- [ ] Demonstrate rollback procedure
- [ ] Show monitoring and logs
- [ ] Explain any custom configurations
- [ ] Review incident response procedures

### For New Developer/Contractor

**Initial Setup**
- [ ] Receive all access credentials
- [ ] Clone GitHub repository locally
- [ ] Install kubectl on local machine
- [ ] Test SSH access to server
- [ ] Verify Docker Hub access

**Verification Steps**
- [ ] Successfully SSH into server
- [ ] Run `kubectl get pods --all-namespaces`
- [ ] Access application logs
- [ ] Make test commit to repository
- [ ] Trigger GitHub Actions workflow
- [ ] Verify deployment updates

**Understanding**
- [ ] Read this document completely
- [ ] Understand the deployment flow
- [ ] Know how to check logs
- [ ] Understand rollback process
- [ ] Know emergency contacts

**First Tasks**
- [ ] Make small text change to site
- [ ] Push change through pipeline
- [ ] Verify change is live
- [ ] Check all monitoring
- [ ] Document any issues found

### Handover Meeting Agenda

1. **System Overview** (30 min)
   - Architecture walkthrough
   - Component relationships
   - Data flow explanation

2. **Access Setup** (45 min)
   - Account creation
   - Credential sharing
   - Access verification

3. **Deployment Demo** (45 min)
   - Live deployment
   - Monitoring checks
   - Troubleshooting example

4. **Q&A Session** (30 min)
   - Address concerns
   - Clarify procedures
   - Discuss improvements

5. **Documentation Review** (30 min)
   - Review this document
   - Note any updates needed
   - Confirm understanding

---

## Appendix A: Emergency Procedures

### Site is Down

1. **Check server status**
   ```bash
   ssh user@server
   systemctl status k3s
   ```

2. **Check pods**
   ```bash
   kubectl get pods --all-namespaces
   ```

3. **Restart services**
   ```bash
   kubectl rollout restart deployment/portfolio -n portfolio
   kubectl rollout restart deployment/swag -n swag
   ```

4. **Check logs for errors**
   ```bash
   kubectl logs -n portfolio deployment/portfolio --tail=50
   kubectl logs -n swag deployment/swag --tail=50
   ```

### Rollback Procedure

```bash
# Immediate rollback
kubectl rollout undo deployment/portfolio -n portfolio

# Check rollback status
kubectl rollout status deployment/portfolio -n portfolio
```

### Server Recovery

If server crashes:
1. Restart server
2. Verify K3s starts: `systemctl status k3s`
3. Check pods auto-start: `kubectl get pods --all-namespaces`
4. Verify site accessibility

---

## Appendix B: Configuration Templates

### Environment Variables Template
```env
# .env.example
NEXT_PUBLIC_API_URL=https://api.ridgeserver.com
NEXT_PUBLIC_ANALYTICS_ID=UA-XXXXXXXXX
NODE_ENV=production
```

### Nginx Custom Configuration
```nginx
# Additional server blocks or configurations
# Place in /config/nginx/site-confs/
```

### K8s Secret Template
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: portfolio
type: Opaque
data:
  api-key: <base64-encoded-value>
```

---

## Version History

| Version | Date | Author | Changes |
|---------|------|--------|---------|
| 1.0 | Aug 2025 | Initial | Initial handover document |

---

*End of Handover Document*

**Important**: Keep this document updated with any infrastructure or process changes. Store it in version control alongside your code for best practices.

**Last Updated**: August 2025  
**Next Review Date**: September 2025  
**Document Owner**: [Your Name]  
**Document Location**: `/home/kappy/k8s/docs/handover.md` and GitHub repository